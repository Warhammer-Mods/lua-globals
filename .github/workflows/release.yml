name: Tagged Release

on: 
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: Target tag/branch
        required: false
      revision:
        description: Target rockspec revision
        required: false

env:
  ROCKSPEC_LICENSE: "MIT"
  ROCKSPEC_LUA_VERSION: "5.1,5.2,5.3,5.4"
  GIT_AUTHOR_NAME: "github-actions[bot]"
  GIT_AUTHOR_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
  GIT_COMMITTER_NAME: "github-actions[bot]"
  GIT_COMMITTER_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
  LUACHECK_CONFIG: ".luacheckrc"
  LUA_VERSION: "5.4"
  LUAROCKS_VERSION: "3.7.0"


jobs:

  lint-and-update:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.info.outputs.name }}
      tag: ${{ steps.info.outputs.tag }}
      branch: ${{ steps.branch.outputs.branch }}
      clean: ${{ steps.changes.outputs.clean }}
      files: ${{ steps.changes.outputs.files }}
      rockspec: ${{ steps.changes.outputs.rockspec }}

    steps:

    - name: Fetch Repo Info
      id: info
      run: |
        echo "::set-output name=name::$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')"
        echo "::set-output name=tag::$(
          if [[ -z ${{ github.event.inputs.tag }} ]]; then
            echo "${GITHUB_REF##*/}"
          else
            echo "${{ github.event.inputs.tag }}"
          fi
        )"


    - uses: leafo/gh-actions-lua@v8.0.0
      with:
        luaVersion: ${{ env.LUA_VERSION }}
        
    - uses: leafo/gh-actions-luarocks@v4.1.0
      with:
        luarocksVersion: ${{ env.LUAROCKS_VERSION }}
        
    - name: Install luacheck
      run: luarocks install luacheck

    - uses: actions/checkout@v2
      with:
        path: ${{ steps.info.outputs.name }}

    - id: branch
      run: |
        cd ${{ steps.info.outputs.name }}
        branch=$(git rev-parse --abbrev-ref HEAD)
        if [[ ${branch} == "${{github.event.inputs.tag}}" ]]; then
          echo "::debug::${branch} == ${{ github.event.inputs.tag }}"
        elif [[ -z "$(git rev-parse --verify --quiet ${{github.event.inputs.tag}})" ]]; then
          echo "::debug::Branch \"${{ github.event.inputs.tag }}\" not found"
          response=$(
            curl -sL --fail \
              --header 'Accept: application/vnd.github.v3+json' \
              -u ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} \
              ${GITHUB_API_URL}/repos/${{ github.repository }}
          )
          echo "::debug::API response: $(jq -rc <<< ${response})"
          branch=$(jq -r '.default_branch' <<< ${response})
        else
          branch=${{github.event.inputs.tag}}
        fi
        echo "::debug::Branch: ${branch}"
        echo "::set-output name=branch::${branch}"

    - name: Luacheck Lint
      id: luacheck
      shell: bash --noprofile --norc {0}
      run: |
        echo "::add-matcher::${{ steps.info.outputs.name }}/.github/luacheck-plain.json"
        cd ${{ steps.info.outputs.name }}
        luacheck *.rockspec \
          --formatter plain \
          --codes --ranges \
          ${{ env.LUACHECK_CONFIG && format('--config {0}', env.LUACHECK_CONFIG) }}
        exitcode=$?
        echo "::remove-matcher owner=luacheck-plain_error::"
        echo "::remove-matcher owner=luacheck-plain_warning::"
        if [ "$exitcode" -gt 1 ]; then
          exit $exitcode;
        else
          exit 0;
        fi

    - name: Update rockspec
      run: |
        cd ${{ steps.info.outputs.name }}
        rm -f *.rockspec
        luarocks write_rockspec \
          --tag=${GITHUB_REF##*/} \
          --lua-versions="${{ env.ROCKSPEC_LUA_VERSION }}" \
          --license="${{ env.ROCKSPEC_LICENSE }}"
        
        if [[ ! -z github.event.inputs.revision ]]; then
          og_name=$(basename *.rockspec)
          new_name=${og_name/-${{github.event.inputs.tag}}-[0-9]/-${{ github.event.inputs.tag }}-${{ github.event.inputs.revision }}}
          sed -i \
            's/^version =.*$/version = ${{ format('\"{0}-{1}\"', github.event.inputs.tag, github.event.inputs.revision) }}/' \
            ${og_name}
          mv -v ${og_name} ${new_name}
        fi

    - name: Get file changes
      id: changes
      run: |
        cd ${{ steps.info.outputs.name }}
        changes="$(git status --porcelain=2 *.rockspec)"
        echo "::debug::${changes}"
        if [ -z "${changes}" ]; then
          echo "::set-output name=clean::true"
        else
          files=()
          changes_tracked="$(git status --porcelain=1 --untracked-files=no *.rockspec)"
          og_IFS=$IFS
          IFS='\n'
          [[ -z $changes_tracked ]] || \
          for line in "${changes_tracked}"; do
            file=$(cut -d" " -f3 <<< ${line})
            files+=("${{ steps.info.outputs.name }}/${file}")
            echo "::notice file=${file}::File changed: ${file}"
            echo "::debug::$(git diff ${file})"
          done
          changes_untracked="$(git ls-files --others --exclude-standard *.rockspec)"
          [[ -z $changes_untracked ]] || \
          for file in "${changes_untracked}"; do
            files+=("${{ steps.info.outputs.name }}/${file}")
            echo "::notice file=${file}::New file: ${file}"
            echo "::debug::$(git diff ${file})"
          done
          IFS=$og_IFS
          echo "::group::Total files changed"
          for file in ${files[@]}; do
            echo "${file}"
          done
          echo "::endgroup::"
          echo "::notice::clean: false"
          echo "::set-output name=files::${files[@]}"
          echo "::set-output name=clean::false"
          # there should be only one rockspec file
          echo "::set-output name=rockspec::$(basename *.rockspec)"
        fi

    - name: Upload updated files
      if: steps.changes.outputs.clean == 'false'
      uses: actions/upload-artifact@v2
      with:
        name: rockspec
        path: ${{ steps.changes.outputs.files }}

  release:
    runs-on: ubuntu-latest
    needs: lint-and-update
    if: needs.lint-and-update.outputs.clean == 'false'

    steps:

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        token: "${{ secrets.BOT_TOKEN }}"

    - name: Remove existing rockspec
      run: git rm -f *.rockspec

    - name: Download updated files
      uses: actions/download-artifact@v2
      with:
        name: rockspec

    - name: Commit files
      id: commit
      run: |
        tag_message="$(git tag -l --format='%(contents)' ${GITHUB_REF##*/})"
        git config --local user.email ${{ env.GIT_AUTHOR_EMAIL }}
        git config --local user.name ${{ env.GIT_AUTHOR_NAME }}
        git add *.rockspec
        git commit -m "[Luarocks] Update rockspec to ${{ needs.lint-and-update.outputs.tag }}"
        if ${{ startsWith(github.ref, 'refs/tags/') }}; then
          git tag -a "release/${{ needs.lint-and-update.outputs.tag }}" -m "${tag_message} ${{ github.event.inputs.tag && '-f' }}"
        fi

    - name: Push release tag
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.BOT_TOKEN }}
        branch: refs/tags/release/${{ needs.lint-and-update.outputs.tag }}
        force: ${{ github.event.inputs.tag && 'true' || 'false' }}

    - name: Push branch
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.BOT_TOKEN }}
        branch: ${{ needs.lint-and-update.outputs.branch }}

  deploy:
    needs: [lint-and-update, release]
    runs-on: ubuntu-latest

    steps:

    - uses: leafo/gh-actions-lua@v8.0.0
      with:
        luaVersion: ${{ env.LUA_VERSION }}
        
    - uses: leafo/gh-actions-luarocks@v4.1.0
      with:
        luarocksVersion: ${{ env.LUAROCKS_VERSION }}
        
    - name: Install dkjson
      run: luarocks install dkjson

    - uses: actions/checkout@v2
      with:
        path: ${{ needs.lint-and-update.outputs.name }}
        ref: refs/tags/release/${{ needs.lint-and-update.outputs.tag }}

    - name: Upload rock
      run: |
        cd ${{ needs.lint-and-update.outputs.name }}
        luarocks upload \
          ${{ github.event.inputs.tag && '--force' }} \
          --api-key="${{ secrets.LUAROCKS_API_KEY }}" \
          "${{ needs.lint-and-update.outputs.rockspec }}"
